//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-29190527
// Cuda compilation tools, release 11.1, V11.1.105
// Based on LLVM 3.4svn
//

.version 7.1
.target sm_80
.address_size 64

	// .globl	Fused_Cast_BiasAdd_ReLU_fusion_12078441444412672381_kernel0

.visible .entry Fused_Cast_BiasAdd_ReLU_fusion_12078441444412672381_kernel0(
	.param .u64 Fused_Cast_BiasAdd_ReLU_fusion_12078441444412672381_kernel0_param_0,
	.param .u64 Fused_Cast_BiasAdd_ReLU_fusion_12078441444412672381_kernel0_param_1,
	.param .u64 Fused_Cast_BiasAdd_ReLU_fusion_12078441444412672381_kernel0_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<69>;
	.reg .f32 	%f<17>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd1, [Fused_Cast_BiasAdd_ReLU_fusion_12078441444412672381_kernel0_param_0];
	ld.param.u64 	%rd2, [Fused_Cast_BiasAdd_ReLU_fusion_12078441444412672381_kernel0_param_1];
	ld.param.u64 	%rd3, [Fused_Cast_BiasAdd_ReLU_fusion_12078441444412672381_kernel0_param_2];
	cvta.to.global.u64 	%rd4, %rd1;
	cvta.to.global.u64 	%rd5, %rd2;
	mov.u32 	%r5, %ctaid.y;
	shl.b32 	%r6, %r5, 14;
	mov.u32 	%r7, %tid.x;
	shr.s32 	%r8, %r7, 31;
	shr.u32 	%r9, %r8, 24;
	add.s32 	%r10, %r7, %r9;
	shl.b32 	%r11, %r10, 4;
	and.b32  	%r12, %r11, -4096;
	add.s32 	%r13, %r12, %r6;
	mov.u32 	%r14, %ctaid.x;
	shl.b32 	%r15, %r14, 10;
	add.s32 	%r16, %r13, %r15;
	and.b32  	%r17, %r10, 1073741568;
	sub.s32 	%r18, %r7, %r17;
	shl.b32 	%r19, %r18, 2;
	add.s32 	%r20, %r16, %r19;
	mul.wide.s32 	%rd6, %r20, 2;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.nc.v4.u16 	{%rs65, %rs66, %rs67, %rs68}, [%rd7];
	add.s32 	%r21, %r19, %r15;
	mul.wide.s32 	%rd8, %r21, 4;
	add.s64 	%rd9, %rd4, %rd8;
	ld.global.nc.v4.f32 	{%f13, %f14, %f15, %f16}, [%rd9];
	mov.f32 	%f10, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs1, %f10;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs2, %f13;}

	// inline asm
	// inline asm
	{add.f16 %rs3,%rs65,%rs2;
}
	// inline asm
	// inline asm
	{ .reg .pred __$temp3;
  setp.lt.f16  __$temp3, %rs1, %rs3;
  selp.u16 %rs6, 1, 0, __$temp3;}
	// inline asm
	setp.ne.s16	%p1, %rs6, 0;
	selp.u32	%r1, 1, 0, %p1;
	// inline asm
	cvt.rn.f16.s32 %rs9, %r1;
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs10, %f13;}

	// inline asm
	// inline asm
	{add.f16 %rs11,%rs65,%rs10;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs17, %f10;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs18, %f14;}

	// inline asm
	// inline asm
	{add.f16 %rs19,%rs66,%rs18;
}
	// inline asm
	// inline asm
	{ .reg .pred __$temp3;
  setp.lt.f16  __$temp3, %rs17, %rs19;
  selp.u16 %rs22, 1, 0, __$temp3;}
	// inline asm
	setp.ne.s16	%p2, %rs22, 0;
	selp.u32	%r2, 1, 0, %p2;
	// inline asm
	cvt.rn.f16.s32 %rs25, %r2;
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs26, %f14;}

	// inline asm
	// inline asm
	{add.f16 %rs27,%rs66,%rs26;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs33, %f10;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs34, %f15;}

	// inline asm
	// inline asm
	{add.f16 %rs35,%rs67,%rs34;
}
	// inline asm
	// inline asm
	{ .reg .pred __$temp3;
  setp.lt.f16  __$temp3, %rs33, %rs35;
  selp.u16 %rs38, 1, 0, __$temp3;}
	// inline asm
	setp.ne.s16	%p3, %rs38, 0;
	selp.u32	%r3, 1, 0, %p3;
	// inline asm
	cvt.rn.f16.s32 %rs41, %r3;
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs42, %f15;}

	// inline asm
	// inline asm
	{add.f16 %rs43,%rs67,%rs42;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs49, %f10;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs50, %f16;}

	// inline asm
	// inline asm
	{add.f16 %rs51,%rs68,%rs50;
}
	// inline asm
	// inline asm
	{ .reg .pred __$temp3;
  setp.lt.f16  __$temp3, %rs49, %rs51;
  selp.u16 %rs54, 1, 0, __$temp3;}
	// inline asm
	setp.ne.s16	%p4, %rs54, 0;
	selp.u32	%r4, 1, 0, %p4;
	// inline asm
	cvt.rn.f16.s32 %rs57, %r4;
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs58, %f16;}

	// inline asm
	// inline asm
	{add.f16 %rs59,%rs68,%rs58;
}
	// inline asm
	cvta.to.global.u64 	%rd10, %rd3;
	add.s64 	%rd11, %rd10, %rd6;
	// inline asm
	{mul.f16 %rs62,%rs57,%rs59;
}
	// inline asm
	// inline asm
	{mul.f16 %rs46,%rs41,%rs43;
}
	// inline asm
	// inline asm
	{mul.f16 %rs30,%rs25,%rs27;
}
	// inline asm
	// inline asm
	{mul.f16 %rs14,%rs9,%rs11;
}
	// inline asm
	st.global.v4.u16 	[%rd11], {%rs14, %rs30, %rs46, %rs62};
	ret;
}


