//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-29190527
// Cuda compilation tools, release 11.1, V11.1.105
// Based on LLVM 3.4svn
//

.version 7.1
.target sm_80
.address_size 64

	// .globl	Fused_DropoutGrad_238119515854486520_kernel0

.visible .entry Fused_DropoutGrad_238119515854486520_kernel0(
	.param .u64 Fused_DropoutGrad_238119515854486520_kernel0_param_0,
	.param .u64 Fused_DropoutGrad_238119515854486520_kernel0_param_1,
	.param .u64 Fused_DropoutGrad_238119515854486520_kernel0_param_2
)
{
	.reg .b16 	%rs<169>;
	.reg .f32 	%f<85>;
	.reg .b32 	%r<41>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [Fused_DropoutGrad_238119515854486520_kernel0_param_0];
	ld.param.u64 	%rd2, [Fused_DropoutGrad_238119515854486520_kernel0_param_1];
	ld.param.u64 	%rd3, [Fused_DropoutGrad_238119515854486520_kernel0_param_2];
	cvta.to.global.u64 	%rd4, %rd3;
	cvta.to.global.u64 	%rd5, %rd1;
	cvta.to.global.u64 	%rd6, %rd2;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	shl.b32 	%r3, %r2, 3;
	mad.lo.s32 	%r4, %r1, 12288, %r3;
	mul.wide.s32 	%rd7, %r4, 2;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.nc.v4.f32 	{%f25, %f26, %f27, %f28}, [%rd8];
	mov.b32 	 %r5, %f25;
	mov.b32 	 %r6, %f26;
	mov.b32 	 %r7, %f27;
	mov.b32 	 %r8, %f28;
	add.s64 	%rd9, %rd5, %rd7;
	ld.global.nc.v4.f32 	{%f33, %f34, %f35, %f36}, [%rd9];
	mov.b32 	 %r9, %f33;
	mov.b32 	 %r10, %f34;
	mov.b32 	 %r11, %f35;
	mov.b32 	 %r12, %f36;
	mov.f32 	%f24, 0f3FA00000;
	// inline asm
	{  cvt.rn.f16.f32 %rs1, %f24;}

	// inline asm
	mov.b32	{%rs3, %rs10}, %r9;
	// inline asm
	{mul.f16 %rs2,%rs3,%rs1;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs8, %f24;}

	// inline asm
	// inline asm
	{mul.f16 %rs9,%rs10,%rs8;
}
	// inline asm
	mov.b32	{%rs7, %rs14}, %r5;
	// inline asm
	{mul.f16 %rs12,%rs9,%rs14;
}
	// inline asm
	// inline asm
	{mul.f16 %rs5,%rs2,%rs7;
}
	// inline asm
	mov.b32	%r13, {%rs5, %rs12};
	// inline asm
	{  cvt.rn.f16.f32 %rs15, %f24;}

	// inline asm
	mov.b32	{%rs17, %rs24}, %r10;
	// inline asm
	{mul.f16 %rs16,%rs17,%rs15;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs22, %f24;}

	// inline asm
	// inline asm
	{mul.f16 %rs23,%rs24,%rs22;
}
	// inline asm
	mov.b32	{%rs21, %rs28}, %r6;
	// inline asm
	{mul.f16 %rs26,%rs23,%rs28;
}
	// inline asm
	// inline asm
	{mul.f16 %rs19,%rs16,%rs21;
}
	// inline asm
	mov.b32	%r14, {%rs19, %rs26};
	// inline asm
	{  cvt.rn.f16.f32 %rs29, %f24;}

	// inline asm
	mov.b32	{%rs31, %rs38}, %r11;
	// inline asm
	{mul.f16 %rs30,%rs31,%rs29;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs36, %f24;}

	// inline asm
	// inline asm
	{mul.f16 %rs37,%rs38,%rs36;
}
	// inline asm
	mov.b32	{%rs35, %rs42}, %r7;
	// inline asm
	{mul.f16 %rs40,%rs37,%rs42;
}
	// inline asm
	// inline asm
	{mul.f16 %rs33,%rs30,%rs35;
}
	// inline asm
	mov.b32	%r15, {%rs33, %rs40};
	// inline asm
	{  cvt.rn.f16.f32 %rs43, %f24;}

	// inline asm
	mov.b32	{%rs45, %rs52}, %r12;
	// inline asm
	{mul.f16 %rs44,%rs45,%rs43;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs50, %f24;}

	// inline asm
	// inline asm
	{mul.f16 %rs51,%rs52,%rs50;
}
	// inline asm
	mov.b32	{%rs49, %rs56}, %r8;
	// inline asm
	{mul.f16 %rs54,%rs51,%rs56;
}
	// inline asm
	// inline asm
	{mul.f16 %rs47,%rs44,%rs49;
}
	// inline asm
	mov.b32	%r16, {%rs47, %rs54};
	add.s64 	%rd10, %rd4, %rd7;
	mov.b32 	 %f41, %r16;
	mov.b32 	 %f42, %r15;
	mov.b32 	 %f43, %r14;
	mov.b32 	 %f44, %r13;
	st.global.v4.f32 	[%rd10], {%f44, %f43, %f42, %f41};
	ld.global.nc.v4.f32 	{%f45, %f46, %f47, %f48}, [%rd8+8192];
	mov.b32 	 %r17, %f45;
	mov.b32 	 %r18, %f46;
	mov.b32 	 %r19, %f47;
	mov.b32 	 %r20, %f48;
	ld.global.nc.v4.f32 	{%f53, %f54, %f55, %f56}, [%rd9+8192];
	mov.b32 	 %r21, %f53;
	mov.b32 	 %r22, %f54;
	mov.b32 	 %r23, %f55;
	mov.b32 	 %r24, %f56;
	// inline asm
	{  cvt.rn.f16.f32 %rs57, %f24;}

	// inline asm
	mov.b32	{%rs59, %rs66}, %r21;
	// inline asm
	{mul.f16 %rs58,%rs59,%rs57;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs64, %f24;}

	// inline asm
	// inline asm
	{mul.f16 %rs65,%rs66,%rs64;
}
	// inline asm
	mov.b32	{%rs63, %rs70}, %r17;
	// inline asm
	{mul.f16 %rs68,%rs65,%rs70;
}
	// inline asm
	// inline asm
	{mul.f16 %rs61,%rs58,%rs63;
}
	// inline asm
	mov.b32	%r25, {%rs61, %rs68};
	// inline asm
	{  cvt.rn.f16.f32 %rs71, %f24;}

	// inline asm
	mov.b32	{%rs73, %rs80}, %r22;
	// inline asm
	{mul.f16 %rs72,%rs73,%rs71;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs78, %f24;}

	// inline asm
	// inline asm
	{mul.f16 %rs79,%rs80,%rs78;
}
	// inline asm
	mov.b32	{%rs77, %rs84}, %r18;
	// inline asm
	{mul.f16 %rs82,%rs79,%rs84;
}
	// inline asm
	// inline asm
	{mul.f16 %rs75,%rs72,%rs77;
}
	// inline asm
	mov.b32	%r26, {%rs75, %rs82};
	// inline asm
	{  cvt.rn.f16.f32 %rs85, %f24;}

	// inline asm
	mov.b32	{%rs87, %rs94}, %r23;
	// inline asm
	{mul.f16 %rs86,%rs87,%rs85;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs92, %f24;}

	// inline asm
	// inline asm
	{mul.f16 %rs93,%rs94,%rs92;
}
	// inline asm
	mov.b32	{%rs91, %rs98}, %r19;
	// inline asm
	{mul.f16 %rs96,%rs93,%rs98;
}
	// inline asm
	// inline asm
	{mul.f16 %rs89,%rs86,%rs91;
}
	// inline asm
	mov.b32	%r27, {%rs89, %rs96};
	// inline asm
	{  cvt.rn.f16.f32 %rs99, %f24;}

	// inline asm
	mov.b32	{%rs101, %rs108}, %r24;
	// inline asm
	{mul.f16 %rs100,%rs101,%rs99;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs106, %f24;}

	// inline asm
	// inline asm
	{mul.f16 %rs107,%rs108,%rs106;
}
	// inline asm
	mov.b32	{%rs105, %rs112}, %r20;
	// inline asm
	{mul.f16 %rs110,%rs107,%rs112;
}
	// inline asm
	// inline asm
	{mul.f16 %rs103,%rs100,%rs105;
}
	// inline asm
	mov.b32	%r28, {%rs103, %rs110};
	mov.b32 	 %f61, %r28;
	mov.b32 	 %f62, %r27;
	mov.b32 	 %f63, %r26;
	mov.b32 	 %f64, %r25;
	st.global.v4.f32 	[%rd10+8192], {%f64, %f63, %f62, %f61};
	ld.global.nc.v4.f32 	{%f65, %f66, %f67, %f68}, [%rd8+16384];
	mov.b32 	 %r29, %f65;
	mov.b32 	 %r30, %f66;
	mov.b32 	 %r31, %f67;
	mov.b32 	 %r32, %f68;
	ld.global.nc.v4.f32 	{%f73, %f74, %f75, %f76}, [%rd9+16384];
	mov.b32 	 %r33, %f73;
	mov.b32 	 %r34, %f74;
	mov.b32 	 %r35, %f75;
	mov.b32 	 %r36, %f76;
	// inline asm
	{  cvt.rn.f16.f32 %rs113, %f24;}

	// inline asm
	mov.b32	{%rs115, %rs122}, %r33;
	// inline asm
	{mul.f16 %rs114,%rs115,%rs113;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs120, %f24;}

	// inline asm
	// inline asm
	{mul.f16 %rs121,%rs122,%rs120;
}
	// inline asm
	mov.b32	{%rs119, %rs126}, %r29;
	// inline asm
	{mul.f16 %rs124,%rs121,%rs126;
}
	// inline asm
	// inline asm
	{mul.f16 %rs117,%rs114,%rs119;
}
	// inline asm
	mov.b32	%r37, {%rs117, %rs124};
	// inline asm
	{  cvt.rn.f16.f32 %rs127, %f24;}

	// inline asm
	mov.b32	{%rs129, %rs136}, %r34;
	// inline asm
	{mul.f16 %rs128,%rs129,%rs127;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs134, %f24;}

	// inline asm
	// inline asm
	{mul.f16 %rs135,%rs136,%rs134;
}
	// inline asm
	mov.b32	{%rs133, %rs140}, %r30;
	// inline asm
	{mul.f16 %rs138,%rs135,%rs140;
}
	// inline asm
	// inline asm
	{mul.f16 %rs131,%rs128,%rs133;
}
	// inline asm
	mov.b32	%r38, {%rs131, %rs138};
	// inline asm
	{  cvt.rn.f16.f32 %rs141, %f24;}

	// inline asm
	mov.b32	{%rs143, %rs150}, %r35;
	// inline asm
	{mul.f16 %rs142,%rs143,%rs141;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs148, %f24;}

	// inline asm
	// inline asm
	{mul.f16 %rs149,%rs150,%rs148;
}
	// inline asm
	mov.b32	{%rs147, %rs154}, %r31;
	// inline asm
	{mul.f16 %rs152,%rs149,%rs154;
}
	// inline asm
	// inline asm
	{mul.f16 %rs145,%rs142,%rs147;
}
	// inline asm
	mov.b32	%r39, {%rs145, %rs152};
	// inline asm
	{  cvt.rn.f16.f32 %rs155, %f24;}

	// inline asm
	mov.b32	{%rs157, %rs164}, %r36;
	// inline asm
	{mul.f16 %rs156,%rs157,%rs155;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs162, %f24;}

	// inline asm
	// inline asm
	{mul.f16 %rs163,%rs164,%rs162;
}
	// inline asm
	mov.b32	{%rs161, %rs168}, %r32;
	// inline asm
	{mul.f16 %rs166,%rs163,%rs168;
}
	// inline asm
	// inline asm
	{mul.f16 %rs159,%rs156,%rs161;
}
	// inline asm
	mov.b32	%r40, {%rs159, %rs166};
	mov.b32 	 %f81, %r40;
	mov.b32 	 %f82, %r39;
	mov.b32 	 %f83, %r38;
	mov.b32 	 %f84, %r37;
	st.global.v4.f32 	[%rd10+16384], {%f84, %f83, %f82, %f81};
	ret;
}


