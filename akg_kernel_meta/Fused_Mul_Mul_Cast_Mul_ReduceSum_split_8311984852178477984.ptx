//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-29190527
// Cuda compilation tools, release 11.1, V11.1.105
// Based on LLVM 3.4svn
//

.version 7.1
.target sm_80
.address_size 64

	// .globl	Fused_Mul_Mul_Cast_Mul_ReduceSum_split_8311984852178477984_kernel0
// _ZZ66Fused_Mul_Mul_Cast_Mul_ReduceSum_split_8311984852178477984_kernel0E74T_multiply_input_5_T_cast_T_multiply_T_multiply_input_0_input_3_red_shared has been demoted

.visible .entry Fused_Mul_Mul_Cast_Mul_ReduceSum_split_8311984852178477984_kernel0(
	.param .u64 Fused_Mul_Mul_Cast_Mul_ReduceSum_split_8311984852178477984_kernel0_param_0,
	.param .u64 Fused_Mul_Mul_Cast_Mul_ReduceSum_split_8311984852178477984_kernel0_param_1,
	.param .u64 Fused_Mul_Mul_Cast_Mul_ReduceSum_split_8311984852178477984_kernel0_param_2,
	.param .u64 Fused_Mul_Mul_Cast_Mul_ReduceSum_split_8311984852178477984_kernel0_param_3,
	.param .u64 Fused_Mul_Mul_Cast_Mul_ReduceSum_split_8311984852178477984_kernel0_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .b16 	%rs<33>;
	.reg .f32 	%f<22>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<25>;
	// demoted variable
	.shared .align 4 .b8 _ZZ66Fused_Mul_Mul_Cast_Mul_ReduceSum_split_8311984852178477984_kernel0E74T_multiply_input_5_T_cast_T_multiply_T_multiply_input_0_input_3_red_shared[4096];

	ld.param.u64 	%rd13, [Fused_Mul_Mul_Cast_Mul_ReduceSum_split_8311984852178477984_kernel0_param_0];
	ld.param.u64 	%rd14, [Fused_Mul_Mul_Cast_Mul_ReduceSum_split_8311984852178477984_kernel0_param_1];
	ld.param.u64 	%rd15, [Fused_Mul_Mul_Cast_Mul_ReduceSum_split_8311984852178477984_kernel0_param_2];
	ld.param.u64 	%rd16, [Fused_Mul_Mul_Cast_Mul_ReduceSum_split_8311984852178477984_kernel0_param_3];
	ld.param.u64 	%rd12, [Fused_Mul_Mul_Cast_Mul_ReduceSum_split_8311984852178477984_kernel0_param_4];
	cvta.to.global.u64 	%rd1, %rd14;
	cvta.to.global.u64 	%rd2, %rd16;
	cvta.to.global.u64 	%rd3, %rd13;
	cvta.to.global.u64 	%rd4, %rd15;
	mov.u32 	%r1, %tid.x;
	shl.b32 	%r10, %r1, 2;
	mov.u32 	%r11, _ZZ66Fused_Mul_Mul_Cast_Mul_ReduceSum_split_8311984852178477984_kernel0E74T_multiply_input_5_T_cast_T_multiply_T_multiply_input_0_input_3_red_shared;
	add.s32 	%r2, %r11, %r10;
	ld.shared.f32 	%f21, [%r2];
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r12, %r1, 4;
	mad.lo.s32 	%r13, %r3, 16384, %r12;
	mul.wide.s32 	%rd24, %r13, 4;
	mul.wide.s32 	%rd23, %r13, 2;
	mov.u32 	%r16, 0;
	mov.u32 	%r17, %r16;

BB0_1:
	setp.eq.s32	%p1, %r17, 0;
	selp.f32	%f12, 0f00000000, %f21, %p1;
	mov.f32 	%f10, 0f3FA00000;
	// inline asm
	{  cvt.rn.f16.f32 %rs1, %f10;}

	// inline asm
	add.s64 	%rd17, %rd4, %rd23;
	ld.global.nc.u16 	%rs3, [%rd17];
	// inline asm
	{mul.f16 %rs2,%rs3,%rs1;
}
	// inline asm
	add.s64 	%rd18, %rd3, %rd23;
	ld.global.nc.u16 	%rs7, [%rd18];
	// inline asm
	{mul.f16 %rs5,%rs2,%rs7;
}
	// inline asm
	// inline asm
	{  cvt.f32.f16 %f5, %rs5;}

	// inline asm
	add.s64 	%rd19, %rd2, %rd24;
	st.global.f32 	[%rd19], %f5;
	add.s64 	%rd20, %rd1, %rd24;
	ld.global.nc.f32 	%f13, [%rd20];
	fma.rn.f32 	%f14, %f5, %f13, %f12;
	// inline asm
	{  cvt.rn.f16.f32 %rs9, %f10;}

	// inline asm
	ld.global.nc.u16 	%rs11, [%rd17+2];
	// inline asm
	{mul.f16 %rs10,%rs11,%rs9;
}
	// inline asm
	ld.global.nc.u16 	%rs15, [%rd18+2];
	// inline asm
	{mul.f16 %rs13,%rs10,%rs15;
}
	// inline asm
	// inline asm
	{  cvt.f32.f16 %f7, %rs13;}

	// inline asm
	st.global.f32 	[%rd19+4], %f7;
	ld.global.nc.f32 	%f15, [%rd20+4];
	fma.rn.f32 	%f16, %f7, %f15, %f14;
	// inline asm
	{  cvt.rn.f16.f32 %rs17, %f10;}

	// inline asm
	ld.global.nc.u16 	%rs19, [%rd17+4];
	// inline asm
	{mul.f16 %rs18,%rs19,%rs17;
}
	// inline asm
	ld.global.nc.u16 	%rs23, [%rd18+4];
	// inline asm
	{mul.f16 %rs21,%rs18,%rs23;
}
	// inline asm
	// inline asm
	{  cvt.f32.f16 %f9, %rs21;}

	// inline asm
	st.global.f32 	[%rd19+8], %f9;
	ld.global.nc.f32 	%f17, [%rd20+8];
	fma.rn.f32 	%f18, %f9, %f17, %f16;
	// inline asm
	{  cvt.rn.f16.f32 %rs25, %f10;}

	// inline asm
	ld.global.nc.u16 	%rs27, [%rd17+6];
	// inline asm
	{mul.f16 %rs26,%rs27,%rs25;
}
	// inline asm
	ld.global.nc.u16 	%rs31, [%rd18+6];
	// inline asm
	{mul.f16 %rs29,%rs26,%rs31;
}
	// inline asm
	// inline asm
	{  cvt.f32.f16 %f11, %rs29;}

	// inline asm
	st.global.f32 	[%rd19+12], %f11;
	ld.global.nc.f32 	%f19, [%rd20+12];
	fma.rn.f32 	%f21, %f11, %f19, %f18;
	add.s32 	%r17, %r17, 4;
	add.s32 	%r16, %r16, -4;
	add.s64 	%rd24, %rd24, 16;
	add.s64 	%rd23, %rd23, 8;
	setp.ne.s32	%p2, %r16, -16;
	@%p2 bra 	BB0_1;

	cvta.to.global.u64 	%rd11, %rd12;
	st.shared.f32 	[%r2], %f21;
	bar.sync 	0;
	ld.shared.f32 	%f20, [%r2];
	shl.b32 	%r14, %r3, 10;
	add.s32 	%r15, %r14, %r1;
	mul.wide.s32 	%rd21, %r15, 4;
	add.s64 	%rd22, %rd11, %rd21;
	st.global.f32 	[%rd22], %f20;
	bar.sync 	0;
	ret;
}


