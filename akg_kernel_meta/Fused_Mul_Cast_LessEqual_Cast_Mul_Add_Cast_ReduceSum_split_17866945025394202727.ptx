//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-29190527
// Cuda compilation tools, release 11.1, V11.1.105
// Based on LLVM 3.4svn
//

.version 7.1
.target sm_80
.address_size 64

	// .globl	Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0
// _ZZ87Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0E96T_cast_T_add_T_multiply_T_multiply_input_1_T_cast_T_less_equal_T_cast_input_2_input_9_red_shared has been demoted
// _ZZ87Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0E8red_buf3 has been demoted

.visible .entry Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0(
	.param .u64 Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0_param_0,
	.param .u64 Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0_param_1,
	.param .u64 Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0_param_2,
	.param .u64 Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0_param_3,
	.param .u64 Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0_param_4,
	.param .u64 Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0_param_5,
	.param .u64 Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0_param_6,
	.param .u64 Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0_param_7
)
{
	.reg .pred 	%p<19>;
	.reg .b16 	%rs<69>;
	.reg .f32 	%f<55>;
	.reg .b32 	%r<52>;
	.reg .b64 	%rd<26>;
	// demoted variable
	.shared .align 4 .b8 _ZZ87Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0E96T_cast_T_add_T_multiply_T_multiply_input_1_T_cast_T_less_equal_T_cast_input_2_input_9_red_shared[32];
	// demoted variable
	.shared .align 4 .b8 _ZZ87Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0E8red_buf3[4096];

	ld.param.u64 	%rd9, [Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0_param_0];
	ld.param.u64 	%rd10, [Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0_param_1];
	ld.param.u64 	%rd11, [Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0_param_2];
	ld.param.u64 	%rd8, [Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0_param_3];
	ld.param.u64 	%rd12, [Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0_param_5];
	ld.param.u64 	%rd13, [Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0_param_6];
	ld.param.u64 	%rd14, [Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0_param_7];
	cvta.to.global.u64 	%rd15, %rd13;
	mov.u32 	%r1, %ctaid.y;
	shl.b32 	%r9, %r1, 13;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r10, %r2, 10;
	mov.u32 	%r11, %ctaid.x;
	shl.b32 	%r12, %r11, 9;
	add.s32 	%r13, %r9, %r10;
	add.s32 	%r14, %r13, %r12;
	mov.u32 	%r3, %tid.x;
	add.s32 	%r15, %r14, %r3;
	cvta.to.global.u64 	%rd16, %rd11;
	mul.wide.s32 	%rd17, %r15, 4;
	add.s64 	%rd1, %rd16, %rd17;
	ld.global.nc.f32 	%f2, [%rd1];
	// inline asm
	{  cvt.rn.f16.f32 %rs1, %f2;}

	// inline asm
	mov.f32 	%f3, 0f3F4CC000;
	// inline asm
	{  cvt.rn.f16.f32 %rs2, %f3;}

	// inline asm
	// inline asm
	{ .reg .pred __$temp3;
  setp.le.f16  __$temp3, %rs1, %rs2;
  selp.u16 %rs3, 1, 0, __$temp3;}
	// inline asm
	setp.ne.s16	%p2, %rs3, 0;
	selp.u32	%r8, 1, 0, %p2;
	// inline asm
	cvt.rn.f16.s32 %rs6, %r8;
	// inline asm
	cvta.to.global.u64 	%rd18, %rd14;
	mul.wide.s32 	%rd19, %r15, 2;
	add.s64 	%rd2, %rd18, %rd19;
	st.global.u16 	[%rd2], %rs6;
	mov.f32 	%f4, 0f3FA00000;
	// inline asm
	{  cvt.rn.f16.f32 %rs7, %f4;}

	// inline asm
	cvta.to.global.u64 	%rd20, %rd10;
	add.s64 	%rd3, %rd20, %rd19;
	ld.global.nc.u16 	%rs9, [%rd3];
	// inline asm
	{mul.f16 %rs8,%rs9,%rs7;
}
	// inline asm
	// inline asm
	{mul.f16 %rs11,%rs8,%rs6;
}
	// inline asm
	cvta.to.global.u64 	%rd21, %rd9;
	add.s64 	%rd4, %rd21, %rd19;
	ld.global.nc.u16 	%rs16, [%rd4];
	// inline asm
	{add.f16 %rs14,%rs11,%rs16;
}
	// inline asm
	add.s64 	%rd5, %rd15, %rd19;
	st.global.u16 	[%rd5], %rs14;
	// inline asm
	{  cvt.f32.f16 %f5, %rs14;}

	// inline asm
	cvta.to.global.u64 	%rd22, %rd12;
	add.s64 	%rd6, %rd22, %rd17;
	st.global.f32 	[%rd6], %f5;
	shl.b32 	%r16, %r2, 2;
	mov.u32 	%r17, _ZZ87Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0E96T_cast_T_add_T_multiply_T_multiply_input_1_T_cast_T_less_equal_T_cast_input_2_input_9_red_shared;
	add.s32 	%r4, %r17, %r16;
	setp.ne.s32	%p3, %r3, 0;
	@%p3 bra 	BB0_2;

	mov.u32 	%r18, 0;
	st.shared.u32 	[%r4], %r18;

BB0_2:
	ld.global.nc.f32 	%f6, [%rd1+512];
	// inline asm
	{  cvt.rn.f16.f32 %rs18, %f6;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs19, %f3;}

	// inline asm
	// inline asm
	{ .reg .pred __$temp3;
  setp.le.f16  __$temp3, %rs18, %rs19;
  selp.u16 %rs20, 1, 0, __$temp3;}
	// inline asm
	setp.ne.s16	%p4, %rs20, 0;
	selp.u32	%r19, 1, 0, %p4;
	// inline asm
	cvt.rn.f16.s32 %rs23, %r19;
	// inline asm
	st.global.u16 	[%rd2+256], %rs23;
	// inline asm
	{  cvt.rn.f16.f32 %rs24, %f4;}

	// inline asm
	ld.global.nc.u16 	%rs26, [%rd3+256];
	// inline asm
	{mul.f16 %rs25,%rs26,%rs24;
}
	// inline asm
	// inline asm
	{mul.f16 %rs28,%rs25,%rs23;
}
	// inline asm
	ld.global.nc.u16 	%rs33, [%rd4+256];
	// inline asm
	{add.f16 %rs31,%rs28,%rs33;
}
	// inline asm
	st.global.u16 	[%rd5+256], %rs31;
	// inline asm
	{  cvt.f32.f16 %f9, %rs31;}

	// inline asm
	st.global.f32 	[%rd6+512], %f9;
	ld.global.nc.f32 	%f10, [%rd1+1024];
	// inline asm
	{  cvt.rn.f16.f32 %rs35, %f10;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs36, %f3;}

	// inline asm
	// inline asm
	{ .reg .pred __$temp3;
  setp.le.f16  __$temp3, %rs35, %rs36;
  selp.u16 %rs37, 1, 0, __$temp3;}
	// inline asm
	setp.ne.s16	%p5, %rs37, 0;
	selp.u32	%r20, 1, 0, %p5;
	// inline asm
	cvt.rn.f16.s32 %rs40, %r20;
	// inline asm
	st.global.u16 	[%rd2+512], %rs40;
	// inline asm
	{  cvt.rn.f16.f32 %rs41, %f4;}

	// inline asm
	ld.global.nc.u16 	%rs43, [%rd3+512];
	// inline asm
	{mul.f16 %rs42,%rs43,%rs41;
}
	// inline asm
	// inline asm
	{mul.f16 %rs45,%rs42,%rs40;
}
	// inline asm
	ld.global.nc.u16 	%rs50, [%rd4+512];
	// inline asm
	{add.f16 %rs48,%rs45,%rs50;
}
	// inline asm
	st.global.u16 	[%rd5+512], %rs48;
	// inline asm
	{  cvt.f32.f16 %f13, %rs48;}

	// inline asm
	st.global.f32 	[%rd6+1024], %f13;
	ld.global.nc.f32 	%f14, [%rd1+1536];
	// inline asm
	{  cvt.rn.f16.f32 %rs52, %f14;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs53, %f3;}

	// inline asm
	// inline asm
	{ .reg .pred __$temp3;
  setp.le.f16  __$temp3, %rs52, %rs53;
  selp.u16 %rs54, 1, 0, __$temp3;}
	// inline asm
	setp.ne.s16	%p6, %rs54, 0;
	selp.u32	%r21, 1, 0, %p6;
	// inline asm
	cvt.rn.f16.s32 %rs57, %r21;
	// inline asm
	st.global.u16 	[%rd2+768], %rs57;
	// inline asm
	{  cvt.rn.f16.f32 %rs58, %f4;}

	// inline asm
	ld.global.nc.u16 	%rs60, [%rd3+768];
	// inline asm
	{mul.f16 %rs59,%rs60,%rs58;
}
	// inline asm
	// inline asm
	{mul.f16 %rs62,%rs59,%rs57;
}
	// inline asm
	ld.global.nc.u16 	%rs67, [%rd4+768];
	// inline asm
	{add.f16 %rs65,%rs62,%rs67;
}
	// inline asm
	st.global.u16 	[%rd5+768], %rs65;
	// inline asm
	{  cvt.f32.f16 %f17, %rs65;}

	// inline asm
	st.global.f32 	[%rd6+1536], %f17;
	bar.sync 	0;
	ld.global.f32 	%f18, [%rd6];
	add.f32 	%f19, %f18, 0f00000000;
	sub.f32 	%f20, %f19, %f18;
	ld.global.f32 	%f21, [%rd6+512];
	sub.f32 	%f22, %f21, %f20;
	add.f32 	%f23, %f19, %f22;
	sub.f32 	%f24, %f23, %f19;
	sub.f32 	%f25, %f24, %f22;
	ld.global.f32 	%f26, [%rd6+1024];
	sub.f32 	%f27, %f26, %f25;
	add.f32 	%f28, %f23, %f27;
	sub.f32 	%f29, %f28, %f23;
	sub.f32 	%f30, %f29, %f27;
	ld.global.f32 	%f31, [%rd6+1536];
	sub.f32 	%f32, %f31, %f30;
	add.f32 	%f33, %f28, %f32;
	mov.u32 	%r22, %ntid.x;
	mad.lo.s32 	%r23, %r22, %r2, %r3;
	and.b32  	%r5, %r23, 127;
	and.b32  	%r6, %r23, -128;
	add.s32 	%r24, %r6, %r5;
	shl.b32 	%r25, %r24, 2;
	mov.u32 	%r26, _ZZ87Fused_Mul_Cast_LessEqual_Cast_Mul_Add_Cast_ReduceSum_split_17866945025394202727_kernel0E8red_buf3;
	add.s32 	%r7, %r26, %r25;
	st.shared.f32 	[%r7], %f33;
	bar.sync 	0;
	setp.gt.u32	%p7, %r5, 63;
	@%p7 bra 	BB0_4;

	ld.shared.f32 	%f34, [%r7];
	ld.shared.f32 	%f35, [%r7+256];
	add.f32 	%f36, %f34, %f35;
	st.shared.f32 	[%r7], %f36;

BB0_4:
	bar.sync 	0;
	setp.gt.u32	%p8, %r5, 31;
	@%p8 bra 	BB0_6;

	ld.shared.f32 	%f37, [%r7];
	ld.shared.f32 	%f38, [%r7+128];
	add.f32 	%f39, %f37, %f38;
	st.shared.f32 	[%r7], %f39;

BB0_6:
	setp.lt.u32	%p1, %r5, 32;
	bar.sync 	0;
	@!%p1 bra 	BB0_9;
	bra.uni 	BB0_7;

BB0_7:
	ld.shared.f32 	%f40, [%r7];
	mov.b32 	 %r27, %f40;
	mov.u32 	%r28, 2;
	mov.u32 	%r29, 31;
	mov.u32 	%r30, 16;
	mov.u32 	%r31, -1;
	shfl.sync.down.b32 	%r32|%p9, %r27, %r30, %r29, %r31;
	mov.b32 	 %f41, %r32;
	add.f32 	%f42, %f40, %f41;
	mov.b32 	 %r33, %f42;
	mov.u32 	%r34, 8;
	shfl.sync.down.b32 	%r35|%p10, %r33, %r34, %r29, %r31;
	mov.b32 	 %f43, %r35;
	add.f32 	%f44, %f42, %f43;
	mov.b32 	 %r36, %f44;
	mov.u32 	%r37, 4;
	shfl.sync.down.b32 	%r38|%p11, %r36, %r37, %r29, %r31;
	mov.b32 	 %f45, %r38;
	add.f32 	%f46, %f44, %f45;
	mov.b32 	 %r39, %f46;
	shfl.sync.down.b32 	%r40|%p12, %r39, %r28, %r29, %r31;
	mov.b32 	 %f47, %r40;
	add.f32 	%f48, %f46, %f47;
	mov.b32 	 %r41, %f48;
	mov.u32 	%r42, 1;
	shfl.sync.down.b32 	%r43|%p13, %r41, %r42, %r29, %r31;
	mov.b32 	 %f49, %r43;
	add.f32 	%f1, %f48, %f49;
	setp.ne.s32	%p14, %r5, 0;
	@%p14 bra 	BB0_9;

	st.shared.f32 	[%r7], %f1;

BB0_9:
	bar.sync 	0;
	setp.ne.s32	%p15, %r5, 0;
	@%p15 bra 	BB0_11;

	shl.b32 	%r44, %r6, 2;
	add.s32 	%r46, %r26, %r44;
	ld.shared.f32 	%f50, [%r46];
	ld.shared.f32 	%f51, [%r4];
	add.f32 	%f52, %f51, %f50;
	st.shared.f32 	[%r4], %f52;

BB0_11:
	bar.sync 	0;
	setp.eq.s32	%p16, %r2, 0;
	setp.lt.s32	%p17, %r3, 8;
	and.pred  	%p18, %p17, %p16;
	@!%p18 bra 	BB0_13;
	bra.uni 	BB0_12;

BB0_12:
	shl.b32 	%r47, %r3, 2;
	add.s32 	%r49, %r17, %r47;
	ld.shared.f32 	%f53, [%r49];
	shl.b32 	%r50, %r1, 3;
	add.s32 	%r51, %r50, %r3;
	cvta.to.global.u64 	%rd23, %rd8;
	mul.wide.s32 	%rd24, %r51, 4;
	add.s64 	%rd25, %rd23, %rd24;
	atom.global.add.f32 	%f54, [%rd25], %f53;

BB0_13:
	bar.sync 	0;
	ret;
}


