//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-29190527
// Cuda compilation tools, release 11.1, V11.1.105
// Based on LLVM 3.4svn
//

.version 7.1
.target sm_80
.address_size 64

	// .globl	Fused_Cast_Reshape_Sub_Mul_split_Cast_Reshape_Sub_Mul_split_parallel_5289627141747599653_kernel0

.visible .entry Fused_Cast_Reshape_Sub_Mul_split_Cast_Reshape_Sub_Mul_split_parallel_5289627141747599653_kernel0(
	.param .u64 Fused_Cast_Reshape_Sub_Mul_split_Cast_Reshape_Sub_Mul_split_parallel_5289627141747599653_kernel0_param_0,
	.param .u64 Fused_Cast_Reshape_Sub_Mul_split_Cast_Reshape_Sub_Mul_split_parallel_5289627141747599653_kernel0_param_1,
	.param .u64 Fused_Cast_Reshape_Sub_Mul_split_Cast_Reshape_Sub_Mul_split_parallel_5289627141747599653_kernel0_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .b16 	%rs<145>;
	.reg .f32 	%f<65>;
	.reg .b32 	%r<49>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd6, [Fused_Cast_Reshape_Sub_Mul_split_Cast_Reshape_Sub_Mul_split_parallel_5289627141747599653_kernel0_param_0];
	ld.param.u64 	%rd4, [Fused_Cast_Reshape_Sub_Mul_split_Cast_Reshape_Sub_Mul_split_parallel_5289627141747599653_kernel0_param_1];
	ld.param.u64 	%rd5, [Fused_Cast_Reshape_Sub_Mul_split_Cast_Reshape_Sub_Mul_split_parallel_5289627141747599653_kernel0_param_2];
	cvta.to.global.u64 	%rd1, %rd6;
	mov.u32 	%r1, %ctaid.x;
	setp.lt.s32	%p1, %r1, 1536;
	mul.hi.s32 	%r21, %r1, 715827883;
	shr.u32 	%r22, %r21, 31;
	shr.s32 	%r23, %r21, 8;
	add.s32 	%r24, %r23, %r22;
	mul.lo.s32 	%r25, %r24, 1536;
	sub.s32 	%r2, %r1, %r25;
	mov.u32 	%r3, %tid.x;
	shr.s32 	%r26, %r3, 31;
	shr.u32 	%r27, %r26, 23;
	add.s32 	%r28, %r3, %r27;
	and.b32  	%r29, %r28, -512;
	sub.s32 	%r4, %r3, %r29;
	@%p1 bra 	BB0_3;
	bra.uni 	BB0_1;

BB0_3:
	shl.b32 	%r41, %r3, 2;
	mad.lo.s32 	%r47, %r1, 16384, %r41;
	shl.b32 	%r42, %r4, 2;
	mad.lo.s32 	%r46, %r2, 16384, %r42;
	cvta.to.global.u64 	%rd3, %rd4;
	mov.u32 	%r48, 0;

BB0_4:
	mul.wide.s32 	%rd11, %r47, 4;
	add.s64 	%rd12, %rd1, %rd11;
	ld.global.nc.v4.f32 	{%f57, %f58, %f59, %f60}, [%rd12];
	mov.f32 	%f54, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs73, %f54;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs74, %f57;}

	// inline asm
	// inline asm
	{sub.f16 %rs75,%rs73,%rs74;
}
	// inline asm
	mov.f32 	%f56, 0fC61C4000;
	// inline asm
	{  cvt.rn.f16.f32 %rs78, %f56;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs82, %f54;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs83, %f58;}

	// inline asm
	// inline asm
	{sub.f16 %rs84,%rs82,%rs83;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs87, %f56;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs91, %f54;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs92, %f59;}

	// inline asm
	// inline asm
	{sub.f16 %rs93,%rs91,%rs92;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs96, %f56;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs100, %f54;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs101, %f60;}

	// inline asm
	// inline asm
	{sub.f16 %rs102,%rs100,%rs101;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs105, %f56;}

	// inline asm
	mul.wide.s32 	%rd13, %r46, 2;
	add.s64 	%rd14, %rd3, %rd13;
	// inline asm
	{mul.f16 %rs106,%rs102,%rs105;
}
	// inline asm
	// inline asm
	{mul.f16 %rs97,%rs93,%rs96;
}
	// inline asm
	// inline asm
	{mul.f16 %rs88,%rs84,%rs87;
}
	// inline asm
	// inline asm
	{mul.f16 %rs79,%rs75,%rs78;
}
	// inline asm
	st.global.v4.u16 	[%rd14], {%rs79, %rs88, %rs97, %rs106};
	ld.global.nc.v4.f32 	{%f61, %f62, %f63, %f64}, [%rd12+8192];
	// inline asm
	{  cvt.rn.f16.f32 %rs109, %f54;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs110, %f61;}

	// inline asm
	// inline asm
	{sub.f16 %rs111,%rs109,%rs110;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs114, %f56;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs118, %f54;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs119, %f62;}

	// inline asm
	// inline asm
	{sub.f16 %rs120,%rs118,%rs119;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs123, %f56;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs127, %f54;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs128, %f63;}

	// inline asm
	// inline asm
	{sub.f16 %rs129,%rs127,%rs128;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs132, %f56;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs136, %f54;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs137, %f64;}

	// inline asm
	// inline asm
	{sub.f16 %rs138,%rs136,%rs137;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs141, %f56;}

	// inline asm
	// inline asm
	{mul.f16 %rs142,%rs138,%rs141;
}
	// inline asm
	// inline asm
	{mul.f16 %rs133,%rs129,%rs132;
}
	// inline asm
	// inline asm
	{mul.f16 %rs124,%rs120,%rs123;
}
	// inline asm
	// inline asm
	{mul.f16 %rs115,%rs111,%rs114;
}
	// inline asm
	st.global.v4.u16 	[%rd14+4096], {%rs115, %rs124, %rs133, %rs142};
	add.s32 	%r47, %r47, 4096;
	add.s32 	%r46, %r46, 4096;
	add.s32 	%r48, %r48, 2;
	setp.lt.s32	%p3, %r48, 8;
	@%p3 bra 	BB0_4;
	bra.uni 	BB0_5;

BB0_1:
	add.s32 	%r31, %r1, -1536;
	mul.hi.s32 	%r32, %r31, 715827883;
	shr.u32 	%r33, %r32, 31;
	shr.s32 	%r34, %r32, 8;
	add.s32 	%r35, %r34, %r33;
	mul.lo.s32 	%r36, %r35, 1536;
	sub.s32 	%r37, %r31, %r36;
	shl.b32 	%r38, %r3, 2;
	mad.lo.s32 	%r44, %r2, 16384, %r38;
	shl.b32 	%r39, %r4, 2;
	mad.lo.s32 	%r43, %r37, 16384, %r39;
	cvta.to.global.u64 	%rd2, %rd5;
	mov.u32 	%r45, 0;

BB0_2:
	mul.wide.s32 	%rd7, %r44, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.nc.v4.f32 	{%f25, %f26, %f27, %f28}, [%rd8];
	mov.f32 	%f22, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs1, %f22;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs2, %f25;}

	// inline asm
	// inline asm
	{sub.f16 %rs3,%rs1,%rs2;
}
	// inline asm
	mov.f32 	%f24, 0fC61C4000;
	// inline asm
	{  cvt.rn.f16.f32 %rs6, %f24;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs10, %f22;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs11, %f26;}

	// inline asm
	// inline asm
	{sub.f16 %rs12,%rs10,%rs11;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs15, %f24;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs19, %f22;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs20, %f27;}

	// inline asm
	// inline asm
	{sub.f16 %rs21,%rs19,%rs20;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs24, %f24;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs28, %f22;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs29, %f28;}

	// inline asm
	// inline asm
	{sub.f16 %rs30,%rs28,%rs29;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs33, %f24;}

	// inline asm
	mul.wide.s32 	%rd9, %r43, 2;
	add.s64 	%rd10, %rd2, %rd9;
	// inline asm
	{mul.f16 %rs34,%rs30,%rs33;
}
	// inline asm
	// inline asm
	{mul.f16 %rs25,%rs21,%rs24;
}
	// inline asm
	// inline asm
	{mul.f16 %rs16,%rs12,%rs15;
}
	// inline asm
	// inline asm
	{mul.f16 %rs7,%rs3,%rs6;
}
	// inline asm
	st.global.v4.u16 	[%rd10], {%rs7, %rs16, %rs25, %rs34};
	ld.global.nc.v4.f32 	{%f29, %f30, %f31, %f32}, [%rd8+8192];
	// inline asm
	{  cvt.rn.f16.f32 %rs37, %f22;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs38, %f29;}

	// inline asm
	// inline asm
	{sub.f16 %rs39,%rs37,%rs38;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs42, %f24;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs46, %f22;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs47, %f30;}

	// inline asm
	// inline asm
	{sub.f16 %rs48,%rs46,%rs47;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs51, %f24;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs55, %f22;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs56, %f31;}

	// inline asm
	// inline asm
	{sub.f16 %rs57,%rs55,%rs56;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs60, %f24;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs64, %f22;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs65, %f32;}

	// inline asm
	// inline asm
	{sub.f16 %rs66,%rs64,%rs65;
}
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs69, %f24;}

	// inline asm
	// inline asm
	{mul.f16 %rs70,%rs66,%rs69;
}
	// inline asm
	// inline asm
	{mul.f16 %rs61,%rs57,%rs60;
}
	// inline asm
	// inline asm
	{mul.f16 %rs52,%rs48,%rs51;
}
	// inline asm
	// inline asm
	{mul.f16 %rs43,%rs39,%rs42;
}
	// inline asm
	st.global.v4.u16 	[%rd10+4096], {%rs43, %rs52, %rs61, %rs70};
	add.s32 	%r44, %r44, 4096;
	add.s32 	%r43, %r43, 4096;
	add.s32 	%r45, %r45, 2;
	setp.lt.s32	%p2, %r45, 8;
	@%p2 bra 	BB0_2;

BB0_5:
	ret;
}


